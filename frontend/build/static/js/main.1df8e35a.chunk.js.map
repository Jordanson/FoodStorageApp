{"version":3,"sources":["components/forms/AddFoodForm.js","components/ListFood.js","components/ListContainers.js","App.js","serviceWorker.js","index.js"],"names":["AddFoodForm","useState","food","setFood","postdata","newFood","a","async","fetch","method","headers","body","JSON","stringify","response","json","result","console","log","onSubmit","event","preventDefault","type","name","value","onChange","target","ListFood","props","useEffect","id","match","params","url","undefined","then","catch","fetchData","map","item","key","ListContainers","containers","setContainers","container","to","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kPAwCeA,EArCK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,KAelBC,EAAW,SAAOC,GAAP,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,cAAe,CACxCC,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUR,MANR,cACXS,EADW,kBAAAR,EAAA,MASIQ,EAASC,QATb,OASXC,EATW,OAUfC,QAAQC,IAAIF,GAVG,sCAajB,OACE,0BAAMG,SAnBa,SAAAC,GACnBA,EAAMC,iBACNjB,EAASF,KAkBP,uCACA,2BAAOoB,KAAK,OAAOC,KAAK,OAAOC,MAAOtB,EAAKqB,KAAME,SA5B3B,SAAAL,GACxBH,QAAQC,IAAIhB,GAEZ,IAAMc,EAASI,EAAMM,OAAOF,MAC5BrB,EAAQa,MAyBN,8CCUSW,EA3CE,SAACC,GAAW,IAAD,EACF3B,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KA4B1B,OAzBA0B,qBAAU,YACU,qBAAAvB,EAAAC,OAAA,uDACRuB,EAAOF,EAAMG,MAAMC,OAAnBF,GACJG,EAAM,GAQSA,OAAZC,IAAPJ,EAAsB,YAAoB,+BAA2BA,GAVrD,WAAAxB,EAAA,MAYVE,MAAMyB,GACTE,MAAK,SAAArB,GAAQ,OAAIA,EAASC,UAC1BoB,MAAK,SAAArB,GAAQ,OAAIX,EAAQW,MACzBsB,OAAM,kBAAMnB,QAAQC,IAAI,qBAAkBe,EAAM,sCAfnC,qCAkBlBI,KAEC,CAACT,EAAMG,MAAMC,SAKd,6BACE,6BACE,4BACG9B,EAAKoC,KAAI,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,EAAKT,IACZ,4BAAKS,EAAKhB,c,OCFTkB,EA/BQ,WAAO,IAAD,EACSxC,mBAAS,IADlB,mBACpByC,EADoB,KACRC,EADQ,KAgB3B,OAJAd,qBAAU,YATQ,mBAAAvB,EAAAC,OAAA,uDACV0B,EAAM,kBADI,WAAA3B,EAAA,MAGVE,MAAMyB,GACTE,MAAK,SAAArB,GAAQ,OAAIA,EAASC,UAC1BoB,MAAK,SAAArB,GAAQ,OAAI6B,EAAc7B,MAC/BsB,OAAM,kBAAMnB,QAAQC,IAAI,qBAAkBe,EAAM,sCANnC,qCAUhBI,KACC,IAGD,6BACE,6BACE,4BACGK,EAAWJ,KAAI,SAAAM,GAAS,OACvB,wBAAIJ,IAAKI,EAAUd,IACf,gCAAQ,kBAAC,IAAD,CAAMe,GAAE,oBAAeD,EAAUd,KAAOc,EAAUrB,eCJ3DuB,EAdH,WACV,OACI,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAWrB,IACvC,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAWrB,IACnC,kBAAC,IAAD,CAAOoB,KAAK,WAAWE,OAAK,EAACD,UAAWhD,IACxC,kBAAC,IAAD,CAAO+C,KAAK,kBAAkBE,OAAK,EAACD,UAAWP,OCFrCS,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCXRuB,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OACcC,SAASC,eAAe,SDuHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.1df8e35a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nconst AddFoodForm = () => {\r\n  const [food, setFood] = useState(\"\");\r\n\r\n  const handleInputChange = event => {\r\n    console.log(food);\r\n    \r\n    const result = event.target.value;\r\n    setFood(result);\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    postdata(food);\r\n  }\r\n\r\n  const postdata = async (newFood) => {\r\n    let response = await fetch('/api/food/2', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(newFood)\r\n    });\r\n    \r\n    let result = await response.json();\r\n    console.log(result);\r\n  }\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={food.name} onChange={handleInputChange}/>\r\n      <button>Add food</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddFoodForm\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst ListFood = (props) => {\r\n  const [food, setFood] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { id } = props.match.params;\r\n      let url = \"\";\r\n\r\n      // if (id === undefined) {\r\n      //   url = `/api/food`\r\n      // } else {\r\n      //   url = `/api/food/containers/${id}`\r\n      // }\r\n\r\n      id === undefined ? url = `/api/food` : url = `/api/food/containers/${id}`\r\n  \r\n      await fetch(url)\r\n        .then(response => response.json())\r\n        .then(response => setFood(response))\r\n        .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n    }\r\n\r\n    fetchData();   \r\n      \r\n  }, [props.match.params]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <ul>\r\n          {food.map(item => (\r\n            <li key={item.id}>\r\n              <h1>{item.name}</h1>\r\n            </li>\r\n          ))}\r\n        </ul>  \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListFood;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ListContainers = () => {\r\n  const [containers, setContainers] = useState([]);\r\n  \r\n  const fetchData = async () => {\r\n    const url = \"/api/containers\";\r\n\r\n    await fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => setContainers(response))\r\n      .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();     \r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <ul>\r\n          {containers.map(container => (\r\n            <li key={container.id}>\r\n                <button><Link to={`/listfood/${container.id}`}>{container.name}</Link></button>\r\n            </li>\r\n          ))}\r\n        </ul>  \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListContainers;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport AddFoodForm from './components/forms/AddFoodForm';\r\nimport ListFood from './components/ListFood';\r\nimport ListContainers from './components/ListContainers';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/listfood/:id\" component={ListFood}/>\r\n          <Route path=\"/listfood\" component={ListFood}/>\r\n          <Route path=\"/addfood\" exact component={AddFoodForm}/>\r\n          <Route path=\"/showcontainers\" exact component={ListContainers}/>\r\n        </Switch>\r\n    \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <App />\r\n</BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}